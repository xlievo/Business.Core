<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Business.Core</name>
    </assembly>
    <members>
        <member name="T:Business.Core.Annotations.AttributeBase">
            <summary>
            AttributeBase
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.AttributeBase.MetaData">
            <summary>
            MetaData
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.AttributeBase.MetaData.#ctor(System.Type)">
            <summary>
            MetaData
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Business.Core.Annotations.AttributeBase.MetaData.Type">
            <summary>
            Gets the fully qualified type name, including the namespace but not the assembly
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AttributeBase.MetaData.Name">
            <summary>
            type name
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AttributeBase.MetaData.Declaring">
            <summary>
            Declare the source of this feature
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.AttributeBase.MetaData.DeclaringType">
            <summary>
            Source types that declare this feature
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.AttributeBase.MetaData.DeclaringType.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.AttributeBase.MetaData.DeclaringType.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.AttributeBase.MetaData.DeclaringType.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.AttributeBase.MetaData.DeclaringType.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.AttributeBase.MetaData.DeclaringType.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.AttributeBase.MetaData.Clone(Business.Core.Annotations.AttributeBase.MetaData)">
            <summary>
            Clone
            </summary>
            <param name="metaData"></param>
        </member>
        <member name="P:Business.Core.Annotations.AttributeBase.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this System.Attribute.
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AttributeBase.Item(System.String)">
            <summary>
            Accessor
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.AttributeBase.#ctor">
            <summary>
            AttributeBase
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AttributeBase.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.AttributeBase.Clone``1">
            <summary>
            Depth Clone
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.AttributeBase.Replace(System.String)">
            <summary>
            Replace
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.AttributeBase.ToString">
            <summary>
            return type name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.TestingAttribute">
            <summary>
            TestingAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.TestingAttribute.#ctor(System.String,System.Object,System.String,System.String)">
            <summary>
            regression testing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="result"></param>
            <param name="token"></param>
        </member>
        <member name="P:Business.Core.Annotations.TestingAttribute.Name">
            <summary>
            test key
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.TestingAttribute.Value">
            <summary>
            test args
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.TestingAttribute.Result">
            <summary>
            result
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.TestingAttribute.Token">
            <summary>
            test fixed roken
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.TestingAttribute.Method">
            <summary>
            Target method
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.TestingAttribute.GroupKey(System.String)">
            <summary>
            GroupKey
            </summary>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.IgnoreMode">
            <summary>
            IgnoreMode
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.IgnoreMode.Method">
            <summary>
            Ignore business method
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.IgnoreMode.Group">
            <summary>
            Ignore business group method
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.IgnoreMode.Arg">
            <summary>
            Ignore document presentation
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.IgnoreMode.ArgChild">
            <summary>
            Ignore document child presentation
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.IgnoreMode.BusinessArg">
            <summary>
            Ignoring global parameter annotations injection
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.Ignore">
            <summary>
            Ignore
            <para>1: Ignore business method</para>
            <para>2: Ignore business group method</para>
            <para>3: Ignore document presentation</para>
            <para>4: Ignore document child presentation</para>
            <para>5: Ignoring global parameter annotations injection</para>
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.Ignore.#ctor(Business.Core.Annotations.IgnoreMode)">
            <summary>
            Ignore
            </summary>
            <param name="mode"></param>
        </member>
        <member name="P:Business.Core.Annotations.Ignore.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.Ignore.GroupKey(System.String)">
            <summary>
            GroupKey
            </summary>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.Info">
            <summary>
            Business info
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.Info.#ctor(System.String)">
            <summary>
            Business Formal Name
            </summary>
            <param name="businessName"></param>
        </member>
        <member name="P:Business.Core.Annotations.Info.BusinessName">
            <summary>
            Business formal name
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.Info.Alias">
            <summary>
            Business friendly alias
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.Info.TypeFullName">
            <summary>
            Type fullName
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.Info.DocPhysicalPath">
            <summary>
            Document physical path
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.Info.CommandGroupDefault">
            <summary>
            Group default value
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.Info.GetCommandGroup(System.String,System.String)">
            <summary>
            GetCommandGroup
            </summary>
            <param name="group"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.UseEntry">
            <summary>
            UseEntry
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.UseEntry.#ctor(System.Object,System.String[])">
            <summary>
            UseEntry
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
        </member>
        <member name="P:Business.Core.Annotations.UseEntry.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.UseEntry.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.UseEntry.ParameterName">
            <summary>
            ParameterName
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.UseAttribute">
            <summary>
            Injecting Objects Corresponding to Parameters
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.UseAttribute.#ctor(System.Type)">
            <summary>
            Injecting Objects Corresponding to Parameter type
            </summary>
            <param name="parameterType"></param>
        </member>
        <member name="P:Business.Core.Annotations.UseAttribute.ParameterName">
            <summary>
            Use parameter names to correspond to injection objects
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.UseAttribute.ParameterType">
            <summary>
            Injecting Objects Corresponding to Parameter type
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.AliasAttribute">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.AliasAttribute.#ctor(System.String)">
            <summary>
            AliasAttribute
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Business.Core.Annotations.AliasAttribute.Name">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.DocGroupAttribute">
            <summary>
            Document grouping configuration
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.DocGroupAttribute.#ctor(System.String)">
            <summary>
            Grouping name
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:Business.Core.Annotations.DocGroupAttribute.Group">
            <summary>
            Grouping name
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.DocGroupAttribute.Position">
            <summary>
            position
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.DocGroupAttribute.Badge">
            <summary>
            badge
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.DocGroupAttribute.Active">
            <summary>
            Allowed to expand
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.DocAttribute">
            <summary>
            Document configuration
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.DocAttribute.#ctor(System.String)">
            <summary>
            Friendly name
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Business.Core.Annotations.DocAttribute.Group">
            <summary>
            Method alias grouping
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.DocAttribute.Alias">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.DocAttribute.Position">
            <summary>
            position
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.DocAttribute.Badge">
            <summary>
            badge
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.LoggerAttribute">
            <summary>
            LoggerAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.LoggerAttribute.#ctor(Business.Core.Logger.Type,System.Boolean,Business.Core.Logger.ValueType)">
            <summary>
            LoggerAttribute
            </summary>
            <param name="logType"></param>
            <param name="canWrite"></param>
            <param name="valueType"></param>
        </member>
        <member name="P:Business.Core.Annotations.LoggerAttribute.LogType">
            <summary>
            Record type
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.LoggerAttribute.CanWrite">
            <summary>
            Allow record
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.LoggerAttribute.CanValue">
            <summary>
            Allowed to return to parameters
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.LoggerAttribute.CanResult">
            <summary>
            Allowed to return to results
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.LoggerAttribute.ValueType">
            <summary>
            Logger value type
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.LoggerAttribute.SetType(Business.Core.Logger.Type)">
            <summary>
            SetType
            </summary>
            <param name="logType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.LoggerAttribute.GroupKey(System.String)">
            <summary>
            GroupKey
            </summary>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.LoggerAttribute.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.LoggerValueMode">
            <summary>
            Record parameter model
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.LoggerValueMode.All">
            <summary>
            Allow selective recording of some parameters
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.LoggerValueMode.Select">
            <summary>
            All parameter Records
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.LoggerValueMode.No">
            <summary>
            No records
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.GroupAttribute">
            <summary>
            GroupAttribute
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.GroupAttribute.type">
            <summary>
            Get unified type
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.GroupAttribute.#ctor(System.Type)">
            <summary>
            GroupAttribute
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Business.Core.Annotations.GroupAttribute.Group">
            <summary>
            Used for the command group
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.GroupAttribute.GroupKey(System.String)">
            <summary>
            GroupKey
            </summary>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="P:Business.Core.Annotations.GroupAttribute.Comparer">
            <summary>
            Comparer
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.ArgumentAttribute">
            <summary>
            Base class for all attributes that apply to parameters
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.ArgumentAttribute.MetaData">
            <summary>
            MetaData
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.Business">
            <summary>
            Declaring
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.BusinessName">
            <summary>
            Business Friendly Name
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.MethodOnlyName">
            <summary>
            MethodOnlyName
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.MemberPath">
            <summary>
            MemberPath
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.MemberType">
            <summary>
            Remove IArg Null type
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.Arg">
            <summary>
            Arg
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.Filter">
            <summary>
            This value indicates that the annotation is a filter model used to apply parameters. The default value is UseNotParameterLevel, which means that the injection parameters are filtered out and the annotation is non parameter level
            <para>default: FilterModel.UseNotParameterLevel</para>
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.MetaData.Skip">
            <summary>
            Custom filtering, Returns true to indicate that it does not work on this object, default false
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.MetaData.Clone(Business.Core.Annotations.ArgumentAttribute.MetaData)">
            <summary>
            Clone
            </summary>
            <param name="metaData"></param>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.Clone``1">
            <summary>
            Clone
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.#ctor(System.Int32,System.String,System.Type)">
            <summary>
            Argument base attribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.BindAfter">
            <summary>
            BindAfter
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.ArgMeta">
            <summary>
            ArgMeta
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.CanNull">
            <summary>
            By checking the Allow null value, Default to true
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.State">
            <summary>
            Used to return state
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.Message">
            <summary>
            Used to return error messages
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.ArgumentAttribute.Alias">
            <summary>
            Amicable name
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.Proces(System.Object)">
            <summary>
            Start processing the Parameter object, By this.ResultCreate() method returns
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.Proces``1(System.Object)">
            <summary>
            Start processing the Parameter object, By this.ResultCreate() method returns
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.Proces``1(System.Object,System.Object)">
            <summary>
            Start processing the Parameter object, By this.ResultCreate() method returns
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="token"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.ResultCreate(System.Int32)">
            <summary>
            Used to create the Proces() method returns object
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.ResultCreate(System.Int32,System.String)">
            <summary>
            Used to create the Proces() method returns object
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.ResultCreate(System.Int32,System.String,System.String)">
            <summary>
            Used to create the Proces() method returns object
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.ResultCreate``1(``0,System.String,System.Int32,System.String)">
            <summary>
            Used to create the Proces() method returns object
            </summary>
            <typeparam name="Data"></typeparam>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.ResultCreate(System.Object,System.String,System.Int32,System.String)">
            <summary>
            Used to create the Proces() method returns object
            </summary>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.CheckNull(Business.Core.Annotations.ArgumentAttribute,System.Object)">
            <summary>
            CheckNull
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentAttribute.CheckDefinitionValueType(Business.Core.Annotations.ArgumentAttribute,System.Object,System.Boolean)">
            <summary>
            Check whether the defined value type is the default value
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.FilterModel">
            <summary>
            FilterModel
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.No">
            <summary>
            Apply all parameters, including injection, without filtering
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.UseParameterLevel">
            <summary>
            Filter out injection parameters also parameter level annotation
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.UseNotParameterLevel">
            <summary>
            Filter out injection parameters also non parameter level annotation
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.NotUseParameterLevel">
            <summary>
            Filter out non injection parameters also parameter level annotation
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.NotUseNotParameterLevel">
            <summary>
            Filter out non injection parameters also non parameter level annotation
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.Definition">
            <summary>
            This value indicates whether it filter out custom parameters
            </summary>
        </member>
        <member name="F:Business.Core.Annotations.FilterModel.NotDefinition">
            <summary>
            This value indicates whether it applies only to non custom parameters
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.CommandAttribute">
            <summary>
            Command attribute on a method, for multiple sources to invoke the method
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CommandAttribute.#ctor(System.String)">
            <summary>
            Command attribute on a method, for multiple sources to invoke the method
            </summary>
            <param name="onlyName"></param>
        </member>
        <member name="P:Business.Core.Annotations.CommandAttribute.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.CommandAttribute.OnlyName">
            <summary>
            OnlyName
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.CommandAttribute.OnlyNameByte">
            <summary>
            OnlyNameByte
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CommandAttribute.GroupKey(System.String)">
            <summary>
            GroupKey
            </summary>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.CommandAttribute.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.CheckNullAttribute">
            <summary>
            CheckNullAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckNullAttribute.#ctor(System.Int32,System.String)">
            <summary>
            CheckNullAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="P:Business.Core.Annotations.CheckNullAttribute.CheckValueType">
            <summary>
            Compare type defaults
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckNullAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.SizeAttribute">
            <summary>
            SizeAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.SizeAttribute.#ctor(System.Int32,System.String)">
            <summary>
            SizeAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="P:Business.Core.Annotations.SizeAttribute.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.SizeAttribute.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.SizeAttribute.MinMsg">
            <summary>
            MinMsg
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.SizeAttribute.MaxMsg">
            <summary>
            MaxMsg
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.SizeAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.ScaleAttribute">
            <summary>
            ScaleAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.ScaleAttribute.#ctor(System.Int32,System.String)">
            <summary>
            ScaleAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="P:Business.Core.Annotations.ScaleAttribute.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.ScaleAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.CheckEmailAttribute">
            <summary>
            https://github.com/Microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckEmailAttribute.#ctor(System.Int32,System.String)">
            <summary>
            CheckEmailAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.CheckEmailAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.CheckCharAttribute">
            <summary>
            CheckCharAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckCharAttribute.#ctor(System.Int32,System.String)">
            <summary>
            CheckCharAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="P:Business.Core.Annotations.CheckCharAttribute.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckCharAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.RegexAttribute">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
            https://github.com/microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/RegularExpressionAttribute.cs
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.RegexAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.RegexAttribute.Proces(System.Object)">
            <summary>
            A bitwise combination of the enumeration values that provide options for matching.
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.RegexAttribute.Pattern">
            <summary>
            Gets the regular expression pattern to use
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.RegexAttribute.MatchTimeoutInMilliseconds">
            <summary>
                Gets or sets the timeout to use when matching the regular expression pattern (in milliseconds)
                (-1 means never timeout).
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.RegexAttribute.SetupRegex">
            <summary>
            Sets up the <see cref="P:Business.Core.Annotations.RegexAttribute.Regex"/> property from the <see cref="P:Business.Core.Annotations.RegexAttribute.Pattern"/> property.
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.RegexAttribute.GetDefaultTimeout">
            <summary>
            Returns the default MatchTimeout based on UseLegacyRegExTimeout switch.
            </summary>
        </member>
        <member name="T:Business.Core.Annotations.CheckPhoneAttribute">
            <summary>
            https://github.com/microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/PhoneAttribute.cs
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckPhoneAttribute.#ctor(System.Int32,System.String)">
            <summary>
            CheckPhoneAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.CheckPhoneAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.CheckUrlAttribute">
            <summary>
            https://github.com/microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/UrlAttribute.cs
            https://stackoverflow.com/questions/45707293/url-validation-attribute-marks-localhost-as-invalid-url
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.CheckUrlAttribute.#ctor(System.Int32,System.String)">
            <summary>
            CheckUrlAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.CheckUrlAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.MD5Attribute">
            <summary>
            MD5Attribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.MD5Attribute.#ctor(System.Int32,System.String)">
            <summary>
            MD5Attribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="P:Business.Core.Annotations.MD5Attribute.Encoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.MD5Attribute.HasUpper">
            <summary>
            HasUpper
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.MD5Attribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.AESAttribute">
            <summary>
            AES return to item1=Data and item2=Salt
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AESAttribute.Key">
            <summary>
            key
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AESAttribute.Salt">
            <summary>
            salt
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.AESAttribute.Encoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.AESAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            AES return to item1=Data and item2=Salt
            </summary>
            <param name="key"></param>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.AESAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Annotations.AESAttribute.Equals(System.String,System.String,System.String)">
            <summary>
            Equals
            </summary>
            <param name="password"></param>
            <param name="encryptData"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.ArgumentDefaultAttribute">
            <summary>
            ArgumentDefaultAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentDefaultAttribute.#ctor(System.Type,System.Type,System.Type,System.Int32,System.String)">
            <summary>
            ArgumentDefaultAttribute
            </summary>
            <param name="resultType"></param>
            <param name="resultTypeDefinition"></param>
            <param name="argTypeDefinition"></param>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.ArgumentDefaultAttribute.#ctor(System.Int32,System.String)">
            <summary>
            ArgumentDefaultAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="T:Business.Core.Annotations.ParametersAttribute">
            <summary>
            ParametersAttribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.ParametersAttribute.#ctor(System.Int32,System.String)">
            <summary>
            ParametersAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Core.Annotations.ParametersAttribute.Proces``1(System.Object)">
            <summary>
            Proces
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.JsonArgAttribute">
            <summary>
            System.Text.Json.JsonSerializer.Deserialize
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.JsonArgAttribute.#ctor(System.Int32,System.String,System.Type)">
            <summary>
            JsonArgAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="F:Business.Core.Annotations.JsonArgAttribute.textJsonOptions">
            <summary>
            Options to control the behavior during parsing.
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.JsonArgAttribute.CheckValueType">
            <summary>
            Check whether the defined value type is the default value, (top-level object commit), Default true
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.JsonArgAttribute.Proces``1(System.Object)">
            <summary>
            Proces
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.XmlArgAttribute">
            <summary>
            XML.Deserialize
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.XmlArgAttribute.#ctor(System.Int32,System.String,System.String,System.Type)">
            <summary>
            XmlArgAttribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="rootElementName">Controls XML serialization of the attribute target as an XML root element.</param>
            <param name="type"></param>
        </member>
        <member name="P:Business.Core.Annotations.XmlArgAttribute.RootElementName">
            <summary>
            Controls XML serialization of the attribute target as an XML root element.
            </summary>
        </member>
        <member name="P:Business.Core.Annotations.XmlArgAttribute.CheckValueType">
            <summary>
            Check whether the defined value type is the default value, (top-level object commit), Default true
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.XmlArgAttribute.Proces(System.Object)">
            <summary>
            Proces
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Annotations.HttpFileAttribute">
            <summary>
            Simple asp.net HTTP request file attribute
            </summary>
        </member>
        <member name="M:Business.Core.Annotations.HttpFileAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Simple asp.net HTTP request file attribute
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="T:Business.Core.Auth.IInterceptor">
            <summary>
            IInterceptor
            </summary>
        </member>
        <member name="P:Business.Core.Auth.IInterceptor.Configer">
            <summary>
            Configer
            </summary>
        </member>
        <member name="M:Business.Core.Auth.IInterceptor.Create(System.Type,System.Object[],System.Func{System.Type,System.Object},System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Create
            </summary>
            <param name="businessType"></param>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="ignoreMethods"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Auth.IInterceptor.Intercept(Business.Core.Configer,System.String,System.Object[],System.Func{System.Object},System.String)">
            <summary>
            Intercept
            </summary>
            <param name="configer"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <param name="call"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Auth.Interceptor">
            <summary>
            Interceptor
            </summary>
        </member>
        <member name="P:Business.Core.Auth.Interceptor.Configer">
            <summary>
            Configer
            </summary>
        </member>
        <member name="M:Business.Core.Auth.Interceptor.Create(System.Type,System.Object[],System.Func{System.Type,System.Object},System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Create
            </summary>
            <param name="businessType"></param>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="ignoreMethods"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Auth.Interceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Business.Core.Auth.Interceptor.Intercept(Business.Core.Configer,System.String,System.Object[],System.Func{System.Object},System.String)">
            <summary>
            Intercept
            </summary>
            <param name="configer"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <param name="call"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Auth.IToken">
            <summary>
            IToken
            </summary>
        </member>
        <member name="P:Business.Core.Auth.IToken.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Business.Core.Auth.IToken.Remote">
            <summary>
            Remote
            </summary>
        </member>
        <member name="P:Business.Core.Auth.IToken.Callback">
            <summary>
            Callback
            </summary>
        </member>
        <member name="T:Business.Core.Auth.Token">
            <summary>
            A token sample
            </summary>
        </member>
        <member name="M:Business.Core.Auth.Token.ToString">
            <summary>
            JSON format
            </summary>
            <returns></returns>
        </member>
        <member name="P:Business.Core.Auth.Token.Key">
            <summary>
            The user token
            </summary>
        </member>
        <member name="P:Business.Core.Auth.Token.Remote">
            <summary>
            Remote IP address
            </summary>
        </member>
        <member name="P:Business.Core.Auth.Token.Callback">
            <summary>
            Gets the token of this result, used for callback
            </summary>
        </member>
        <member name="T:Business.Core.Auth.Remote">
            <summary>
            Remote
            </summary>
        </member>
        <member name="M:Business.Core.Auth.Remote.#ctor(System.String,System.Int32)">
            <summary>
            Remote
            </summary>
            <param name="address">An IP address.</param>
            <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
        </member>
        <member name="P:Business.Core.Auth.Remote.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Business.Core.Auth.Remote.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="M:Business.Core.Auth.Remote.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Business.Core.Auth.Remote.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Business.Core.Auth.Remote.ToString">
            <summary>
            Returns the IP address and port number of the specified endpoint.
            </summary>
            <returns>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</returns>
        </member>
        <member name="T:Business.Core.Utils.InterceptorExtensions">
            <summary>
            InterceptorExtensions
            </summary>
        </member>
        <member name="M:Business.Core.Utils.InterceptorExtensions.Intercept(Business.Core.Configer,System.String,System.Object[],System.Func{System.Object},System.String)">
            <summary>
            Intercept
            </summary>
            <param name="configer"></param>
            <param name="method"></param>
            <param name="arguments"></param>
            <param name="call"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.InterceptorExtensions.Finally(Business.Core.Logger,Business.Core.Annotations.CommandAttribute,Business.Core.Meta.MetaData,System.Object,Business.Core.Logger.Type,System.Collections.Generic.Dictionary{System.Int32,Business.Core.IArg},System.Object[],System.String,System.Diagnostics.Stopwatch,System.Object,System.DateTimeOffset,System.Func{Business.Core.Configer.MethodAfter,System.Threading.Tasks.Task})">
            <summary>
            Finally
            </summary>
            <param name="logger"></param>
            <param name="command"></param>
            <param name="meta"></param>
            <param name="returnValue"></param>
            <param name="logType"></param>
            <param name="iArgs"></param>
            <param name="argsObj"></param>
            <param name="methodName"></param>
            <param name="watch"></param>
            <param name="token"></param>
            <param name="dtt"></param>
            <param name="callAfterMethod"></param>
        </member>
        <member name="M:Business.Core.Utils.InterceptorExtensions.GetProcesResult(Business.Core.Annotations.ArgumentAttribute,System.Object,System.Object)">
            <summary>
            GetProcesResult
            </summary>
            <param name="argAttr"></param>
            <param name="value"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.InterceptorExtensions.ArgsResult(Business.Core.Meta.MetaData,System.String,System.Collections.Generic.IList{Business.Core.Meta.Args},System.Object,System.Object)">
            <summary>
            ArgsResult
            </summary>
            <param name="meta"></param>
            <param name="group"></param>
            <param name="args"></param>
            <param name="currentValue"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.BootstrapExtensions">
            <summary>
            BootstrapExtensions
            </summary>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.Use``1(``0,System.Func{Business.Core.IBusiness,Business.Core.IBusiness})">
            <summary>
            Use
            </summary>
            <typeparam name="Bootstrap"></typeparam>
            <param name="bootstrap"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.UseType``1(``0,System.Type[])">
            <summary>
            Inject a parameter type, depending on the parameter type
            </summary>
            <param name="bootstrap"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.LoggerSet``1(``0,Business.Core.Annotations.LoggerAttribute,System.Type[])">
            <summary>
            Set the log characteristics of a parameter, depending on the parameter type
            </summary>
            <param name="bootstrap"></param>
            <param name="logger"></param>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.LoggerSet``1(``0,Business.Core.Annotations.LoggerAttribute,System.String[])">
            <summary>
            Set the log characteristics of a parameter, depending on the parameter name
            </summary>
            <param name="bootstrap"></param>
            <param name="logger"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.IgnoreSet``1(``0,Business.Core.Annotations.Ignore,System.String[])">
            <summary>
            Set a parameter's ignore feature, depending on the parameter name
            </summary>
            <param name="bootstrap"></param>
            <param name="ignore"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.IgnoreSet``1(``0,Business.Core.Annotations.Ignore,System.Type[])">
            <summary>
            IgnoreSet
            </summary>
            <typeparam name="Bootstrap"></typeparam>
            <param name="bootstrap"></param>
            <param name="ignore"></param>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.BootstrapExtensions.MemberSet``1(``0,System.String,System.Object,System.Boolean)">
            <summary>
            MemberSet
            </summary>
            <typeparam name="Bootstrap"></typeparam>
            <param name="bootstrap"></param>
            <param name="memberName"></param>
            <param name="memberObj"></param>
            <param name="skipNull"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.Emit.GetDeclaringType(System.Reflection.MethodInfo)">
            <summary>
            Gets the declaring type of the target <paramref name="method"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> for which to return the declaring type.</param>
            <returns>The type that declares the target <paramref name="method"/>.</returns>
        </member>
        <member name="T:Business.Core.Utils.Emit.IDynamicMethodSkeleton">
            <summary>
            Represents the skeleton of a dynamic method.
            </summary>    
        </member>
        <member name="M:Business.Core.Utils.Emit.IDynamicMethodSkeleton.GetILGenerator">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit the method body.
            </summary>
            <returns>An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.</returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.IDynamicMethodSkeleton.CreateDelegate">
            <summary>
            Create a delegate used to invoke the dynamic method.
            </summary>
            <returns>A function delegate.</returns>
        </member>
        <member name="T:Business.Core.Utils.Emit.IMethodBuilder">
            <summary>
            Represents a class that is capable of creating a delegate used to invoke 
            a method without using late-bound invocation.
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.IMethodBuilder.GetDelegate(System.Reflection.MethodInfo)">
            <summary>
            Gets a delegate that is used to invoke the <paramref name="targetMethod"/>.
            </summary>
            <param name="targetMethod">The <see cref="T:System.Reflection.MethodInfo"/> that represents the target method to invoke.</param>
            <returns>A delegate that represents compiled code used to invoke the <paramref name="targetMethod"/>.</returns>
        </member>
        <member name="T:Business.Core.Utils.Emit.DynamicMethodBuilder">
            <summary>
            A class that is capable of creating a delegate used to invoke 
            a method without using late-bound invocation.
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Business.Core.Utils.Emit.DynamicMethodBuilder"/> class.
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.GetDelegate(System.Reflection.MethodInfo)">
            <summary>
            Gets a delegate that is used to invoke the <paramref name="targetMethod"/>.
            </summary>
            <param name="targetMethod">The <see cref="T:System.Reflection.MethodInfo"/> that represents the target method to invoke.</param>
            <returns>A delegate that represents compiled code used to invoke the <paramref name="targetMethod"/>.</returns>
        </member>
        <member name="T:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton">
            <summary>
            DynamicMethodSkeleton
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton.dynamicMethod">
            <summary>
            dynamicMethod
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton.#ctor">
            <summary>
            DynamicMethodSkeleton
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton.#ctor(System.Type,System.Type[],System.Type,System.Boolean)">
            <summary>
            DynamicMethodSkeleton
            </summary>
            <param name="returnType"></param>
            <param name="parameterTypes"></param>
            <param name="owner"></param>
            <param name="skipVisibility"></param>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton.GetILGenerator">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.ILGenerator"/> used to emit the method body.
            </summary>
            <returns>An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.</returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton.CreateDelegate">
            <summary>
            Create a delegate used to invoke the dynamic method.
            </summary>
            <returns>A function delegate.</returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.DynamicMethodBuilder.DynamicMethodSkeleton.CreateDelegate(System.Type)">
            <summary>
            CreateDelegate
            </summary>
            <param name="delegateType"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Emit.FieldAccessorGenerator">
            <summary>
            FieldAccessorGenerator
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.FieldAccessorGenerator.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
            CreateGetter
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.FieldAccessorGenerator.CreateGetter``2(System.Reflection.FieldInfo)">
            <summary>
            CreateGetter
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.FieldAccessorGenerator.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
            CreateSetter
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.FieldAccessorGenerator.CreateSetter``2(System.Reflection.FieldInfo)">
            <summary>
            CreateSetter
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Emit.PropertyAccessorGenerator">
            <summary>
            PropertyAccessorGenerator
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Emit.PropertyAccessorGenerator.CreateGetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            CreateGetter
            </summary>
            <param name="propertyInfo"></param>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.PropertyAccessorGenerator.CreateGetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            CreateGetter
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="propertyInfo"></param>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.PropertyAccessorGenerator.CreateSetter(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            CreateSetter
            </summary>
            <param name="propertyInfo"></param>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Emit.PropertyAccessorGenerator.CreateSetter``2(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            CreateSetter
            </summary>
            <typeparam name="TTarget"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="propertyInfo"></param>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Accessor">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Accessor.#ctor(System.Type,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})">
            <summary>
            Accessor
            </summary>
            <param name="type"></param>
            <param name="getter"></param>
            <param name="setter"></param>
        </member>
        <member name="P:Business.Core.Utils.Accessor.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Accessor.Getter">
            <summary>
            Getter
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Accessor.Setter">
            <summary>
            Setter
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Accessor.TryGetter(System.Object)">
            <summary>
            TryGetter
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Help">
            <summary>
            Help
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.ErrorBusiness(System.Type,System.String)">
            <summary>
            ErrorBusiness
            </summary>
            <param name="resultTypeDefinition"></param>
            <param name="business"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.ErrorCmd(System.Type,System.String)">
            <summary>
            ErrorCmd
            </summary>
            <param name="resultTypeDefinition"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GetReturnValue(Business.Core.Result.IResult,Business.Core.Meta.MetaData)">
            <summary>
            Exceptions and logic that does not return objects will come here to handle the returned objects
            </summary>
            <param name="result"></param>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GroupEquals(Business.Core.Annotations.GroupAttribute,System.String)">
            <summary>
            null != x and (string.IsNullOrWhiteSpace(x.Group) || x.Group == group)
            </summary>
            <param name="x"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Core.Utils.Help.BaseDirectory">
            <summary>
            BaseDirectory
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            GetMethod
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodSelector"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.UseType``1(``0,System.Type[])">
            <summary>
            UseType
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.UseType``1(``0,System.String[])">
            <summary>
            UseType
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.UseDoc``1(``0,System.String,Business.Core.Document.Options)">
            <summary>
            Generate "Business.Document.DocArg" Document Objects for the specified business class.
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="outDir"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.UseDoc``2(``0,System.Func{Business.Core.Document.DocArgSource{Business.Core.Meta.Args},``1},System.String,Business.Core.Document.Options)">
            <summary>
            Generate document objects for specified business classes.
            </summary>
            <typeparam name="Business"></typeparam>
            <typeparam name="DocArg"></typeparam>
            <param name="business"></param>
            <param name="argCallback"></param>
            <param name="outDir"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.UseDoc``2(``0,System.Func{Business.Core.Document.DocArgSource{Business.Core.Meta.Args},``1},System.Collections.Generic.IDictionary{System.String,Business.Core.Document.Xml.member},Business.Core.Document.Options)">
            <summary>
            Gets the document object of the specified business class.
            </summary>
            <typeparam name="Business"></typeparam>
            <typeparam name="DocArg"></typeparam>
            <param name="business"></param>
            <param name="argCallback"></param>
            <param name="xmlMembers"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GetTypeDefinition(System.Type,System.Collections.Generic.IDictionary{System.String,Business.Core.Document.Xml.member},System.String,System.String,System.String,System.String)">
            <summary>
            GetTypeDefinition
            </summary>
            <param name="type"></param>
            <param name="xmlMembers"></param>
            <param name="summary"></param>
            <param name="groupKey"></param>
            <param name="pathRoot"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Help.TypeDefinition">
            <summary>
            TypeDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.LastType">
            <summary>
            LastType
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.CurrentOrigType">
            <summary>
            Remove IArg type
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.CurrentType">
            <summary>
            Remove IArg Null type
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasDefinition">
            <summary>
            HasDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasCollection">
            <summary>
            HasCollection
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasDictionary">
            <summary>
            HasDictionary
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Nullable">
            <summary>
            Nullable
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.FullName">
            <summary>
            FullName
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.MemberDefinition">
            <summary>
            MemberDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasToken">
            <summary>
            HasToken
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasDefaultValue">
            <summary>
            HasDefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Childrens">
            <summary>
            Childrens
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasEnum">
            <summary>
            HasEnum
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.HasNumeric">
            <summary>
            HasNumeric
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.EnumNames">
            <summary>
            EnumNames
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.EnumValues">
            <summary>
            EnumValues
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.TypeDefinition.Summary">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.LoggerSet``1(``0,Business.Core.Annotations.LoggerAttribute,System.Type[])">
            <summary>
            LoggerSet
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="logger"></param>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.LoggerSet``1(``0,Business.Core.Annotations.LoggerAttribute,System.String[])">
            <summary>
            LoggerSet
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="logger"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IgnoreSet``1(``0,Business.Core.Annotations.Ignore,System.Type[])">
            <summary>
            IgnoreSet
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="ignore"></param>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IgnoreSet``1(``0,Business.Core.Annotations.Ignore,System.String[])">
            <summary>
            IgnoreSet
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="ignore"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.MemberSet``1(``0,System.String,System.Object,System.Boolean)">
            <summary>
            MemberSet
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="business"></param>
            <param name="memberName"></param>
            <param name="memberObj"></param>
            <param name="skipNull"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.ErrorCmd(Business.Core.IBusiness,System.String)">
            <summary>
            ErrorCmd
            </summary>
            <param name="business"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.LoadAssemblys(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            LoadAssemblys
            </summary>
            <param name="assemblyFiles"></param>
            <param name="parallel"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.LoadAssemblys(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            LoadAssemblys
            </summary>
            <param name="assemblys"></param>
            <param name="parallel"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.LoadAssembly(System.String)">
            <summary>
            LoadAssembly
            </summary>
            <param name="assemblyFile"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Clone``1(``0)">
            <summary>
            Clone
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamReadByte(System.IO.Stream)">
            <summary>
            StreamReadByte
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamReadByteAsync(System.IO.Stream)">
            <summary>
            StreamReadByteAsync
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamCopyByte(System.IO.Stream)">
            <summary>
            StreamCopyByte
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamCopyByteAsync(System.IO.Stream)">
            <summary>
            StreamCopyByteAsync
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamReadString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            StreamReadString
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamReadStringAsync(System.IO.Stream,System.Text.Encoding)">
            <summary>
            StreamReadStringAsync
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.FileReadString(System.String,System.Text.Encoding)">
            <summary>
            FileReadString
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.FileReadStringAsync(System.String,System.Text.Encoding)">
            <summary>
            FileReadStringAsync
            </summary>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.FileReadByte(System.String)">
            <summary>
            FileReadByte
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.FileReadByteAsync(System.String,System.Func{System.IO.Stream,System.Threading.Tasks.ValueTask{System.Byte[]}})">
            <summary>
            FileReadByteAsync
            </summary>
            <param name="path"></param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GZipByteAsync(System.IO.Stream,System.IO.Compression.CompressionMode)">
            <summary>
            gzip to Stream
            </summary>
            <param name="value"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamWrite(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            StreamWrite
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Business.Core.Utils.Help.StreamWriteAsync(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            StreamWriteAsync
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.MD5(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            MD5
            </summary>
            <param name="value"></param>
            <param name="hasUpper"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Help.AES">
            <summary>
            AES
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.AES.Encrypt(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            AES return to item1=Data and item2=Salt
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.AES.Decrypt(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Decrypt
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GetBase(System.Exception)">
            <summary>
            When overridden in a derived class, returns the System.Exception that is the root cause of one or more subsequent exceptions.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.ExceptionWrite(System.Exception,System.Boolean,System.Boolean,System.String,System.String,System.Text.Encoding)">
            <summary>
            Write exception to file
            </summary>
            <param name="ex"></param>
            <param name="write"></param>
            <param name="console"></param>
            <param name="path"></param>
            <param name="dateFormat"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Console(System.Exception,System.String)">
            <summary>
            Console
            </summary>
            <param name="ex"></param>
            <param name="dateFormat"></param>
        </member>
        <member name="M:Business.Core.Utils.Help.WriteLocal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            Write text to file
            </summary>
            <param name="text"></param>
            <param name="path"></param>
            <param name="autoTime"></param>
            <param name="write"></param>
            <param name="console"></param>
            <param name="dateFormat"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Business.Core.Utils.Help.Console(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Text.Encoding)">
            <summary>
            Console
            </summary>
            <param name="text"></param>
            <param name="autoTime"></param>
            <param name="console"></param>
            <param name="write"></param>
            <param name="path"></param>
            <param name="dateFormat"></param>
            <param name="encoding"></param>
        </member>
        <member name="F:Business.Core.Utils.Help.UTF8">
            <summary>
            Ignore erroneous characters: Unable to translate Unicode...
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.UTF8String(System.String)">
            <summary>
            Ignore erroneous characters: Unable to translate Unicode...
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Help.CheckCharMode">
            <summary>
            CheckCharMode
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Help.CheckCharMode.All">
            <summary>
            Allow all
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Help.CheckCharMode.Number">
            <summary>
            Allow number
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Help.CheckCharMode.Upper">
            <summary>
            Allow upper
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Help.CheckCharMode.Lower">
            <summary>
            Allow lower
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Help.CheckCharMode.Chinese">
            <summary>
            Allow chinese
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.CheckChar(System.String,Business.Core.Utils.Help.CheckCharMode)">
            <summary>
            CheckChar
            </summary>
            <param name="value"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="P:Business.Core.Utils.Help.Guid">
            <summary>
            ToString("N")
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.CreateInstance(System.Type)">
            <summary>
            general object creation
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.CompareEquals``1(``0,``0)">
            <summary>
            CompareEquals
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectFromCompare"></param>
            <param name="objectToCompare"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.ChangeType``1(System.Object)">
            <summary>
            ChangeType
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.ChangeType(System.Object,System.Type)">
            <summary>
            ChangeType
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Random(System.Int32,System.Int32)">
            <summary>
            Random
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Random(System.Int32)">
            <summary>
            Random
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Random">
            <summary>
            Random
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Scale(System.Double,System.Int32)">
            <summary>
            Scale
            </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.Scale(System.Decimal,System.Int32)">
            <summary>
            Scale
            </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GetName(System.Enum)">
            <summary>
            GetName
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IsDefinition(System.Type)">
            <summary>
            IsDefinition
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.TryJsonDeserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            TryJsonDeserialize
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.TryJsonDeserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            TryJsonDeserialize
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.JsonSerialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            JsonSerialize
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Core.Utils.Help.JsonOptions">
            <summary>
            JsonOptions
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.CamelCase(System.String)">
            <summary>
            CamelCase
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Help.JsonNamingPolicyCamelCase">
            <summary>
            JsonNamingPolicyCamelCase
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Help.JsonNamingPolicyCamelCase.Instance">
            <summary>
            JsonNamingPolicyCamelCase
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.JsonNamingPolicyCamelCase.ConvertName(System.String)">
            <summary>
            ConvertName
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.TryJsonSerialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            TryJsonSerialize
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="value"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.GetTypeCode(System.Type)">
            <summary>
            GetTypeCode
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IsArray(System.Type)">
            <summary>
            Checks if a type is an array or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an array, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IsCollection(System.Type)">
            <summary>
            Checks if a type is an collection or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an collection, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IsEnumerable(System.Type)">
            <summary>
            Checks if a type is enumerable or not
            </summary>
            <param name="source">The type to check.</param>
            <returns><see langword="true" /> if the type is an enumerable, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IsNumeric(System.Type)">
            <summary>
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
            <remarks>
            Boolean is not considered numeric.
            </remarks>
        </member>
        <member name="M:Business.Core.Utils.Help.NotOfType``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Filters our all types not assignable to <typeparamref name="TType"/>.
            </summary>
            <typeparam name="TType">The type that all resulting <see cref="T:System.Type"/> should be assignable to.</typeparam>
            <param name="types">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances that should be filtered.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances.</returns>
        </member>
        <member name="M:Business.Core.Utils.Help.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="genericType"/> is assignable from
            <paramref name="givenType"/> taking into account generic definitions
            </summary>
            <remarks>
            Borrowed from: http://tmont.com/blargh/2011/3/determining-if-an-open-generic-type-isassignablefrom-a-type
            </remarks>
        </member>
        <member name="M:Business.Core.Utils.Help.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            ToReadOnly
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.ToReadOnlyDictionary``3(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,``2},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            ToReadOnlyDictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="elementSelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Help.DateTimeConverter">
            <summary>
            DateTimeConverter
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Help.DateTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type DateTime.
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Help.DateTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:Business.Core.Utils.ReadOnlyDictionary`2">
            <summary>
            ReadOnlyDictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            ReadOnlyDictionary
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyDictionary`2.#ctor">
            <summary>
            ReadOnlyDictionary
            </summary>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            ReadOnlyDictionary
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="T:Business.Core.Utils.ConcurrentReadOnlyDictionary`2">
            <summary>
            ConcurrentReadOnlyDictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Business.Core.Utils.ConcurrentReadOnlyDictionary`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <summary>
            ConcurrentReadOnlyDictionary
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Business.Core.Utils.ConcurrentReadOnlyDictionary`2.#ctor">
            <summary>
            ConcurrentReadOnlyDictionary
            </summary>
        </member>
        <member name="M:Business.Core.Utils.ConcurrentReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            ConcurrentReadOnlyDictionary
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="T:Business.Core.Utils.ReadOnlyCollection`1">
            <summary>
            ReadOnlyCollection
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Business.Core.Utils.ReadOnlyCollection`1.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            ReadOnlyCollection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyCollection`1.#ctor">
            <summary>
            ReadOnlyCollection
            </summary>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyCollection`1.#ctor(System.Int32)">
            <summary>
            ReadOnlyCollection
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Business.Core.Utils.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            ReadOnlyCollection
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Business.Core.Utils.Equality`1">
            <summary>
            Equality
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Business.Core.Utils.Equality`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            CreateComparer
            </summary>
            <typeparam name="V"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.Equality`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            CreateComparer
            </summary>
            <typeparam name="V"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.ComparisonHelper`1">
            <summary>
            ComparisonHelper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Business.Core.Utils.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            CreateComparer
            </summary>
            <typeparam name="V"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Utils.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            CreateComparer
            </summary>
            <typeparam name="V"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Utils.Queue`1">
            <summary>
            Queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Business.Core.Utils.Queue`1.BatchOptions">
            <summary>
            BatchOptions
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Queue`1.BatchOptions.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            BatchOptions
            </summary>
            <param name="interval">Return log time interval, default System.TimeSpan.Zero equals not enabled,5 seconds is reasonable</param>
            <param name="maxNumber">Return log number, less than 1 no restrictions</param>
        </member>
        <member name="P:Business.Core.Utils.Queue`1.BatchOptions.Interval">
            <summary>
            Return log time interval, default System.TimeSpan.Zero equals not enabled,5 seconds is reasonable
            </summary>
        </member>
        <member name="P:Business.Core.Utils.Queue`1.BatchOptions.MaxNumber">
            <summary>
            Return log number, less than 1 no restrictions, more than 100 is recommended, MaxNumber = 1 may cause log queue accumulation and memory overflow
            </summary>
        </member>
        <member name="F:Business.Core.Utils.Queue`1.queue">
            <summary>
            queue
            </summary>
        </member>
        <member name="M:Business.Core.Utils.Queue`1.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},System.Threading.Tasks.ValueTask},Business.Core.Utils.Queue{`0}.BatchOptions,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Queue
            </summary>
            <param name="call"></param>
            <param name="batch"></param>
            <param name="syn">Whether each outgoing thread has synchronous callback, asynchronous by default</param>
            <param name="maxCapacity">the max capacity of this queue</param>
        </member>
        <member name="T:Business.Core.IArg">
            <summary>
            IArg
            </summary>
        </member>
        <member name="P:Business.Core.IArg.In">
            <summary>
            The first input object
            </summary>
        </member>
        <member name="P:Business.Core.IArg.Out">
            <summary>
            The final output object
            </summary>
        </member>
        <member name="T:Business.Core.IArg`2">
            <summary>
            IArg
            </summary>
            <typeparam name="OutType"></typeparam>
            <typeparam name="InType"></typeparam>
        </member>
        <member name="P:Business.Core.IArg`2.In">
            <summary>
            In
            </summary>
        </member>
        <member name="P:Business.Core.IArg`2.Out">
            <summary>
            Out
            </summary>
        </member>
        <member name="T:Business.Core.IArg`1">
            <summary>
            IArg
            </summary>
            <typeparam name="OutType"></typeparam>
        </member>
        <member name="P:Business.Core.IArg`1.Out">
            <summary>
            Out
            </summary>
        </member>
        <member name="T:Business.Core.Arg`2">
            <summary>
            This is a parameter package, used to transform parameters
            </summary>
            <typeparam name="OutType"></typeparam>
            <typeparam name="InType"></typeparam>
        </member>
        <member name="M:Business.Core.Arg`2.op_Implicit(`1)~Business.Core.Arg{`0,`1}">
            <summary>
            Arg
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Core.Arg`2.op_Implicit(`0)~Business.Core.Arg{`0,`1}">
            <summary>
            Arg
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Business.Core.Arg`2.Out">
            <summary>
            The final output object
            </summary>
        </member>
        <member name="P:Business.Core.Arg`2.In">
            <summary>
            The first input object
            </summary>
        </member>
        <member name="T:Business.Core.Arg`1">
            <summary>
            This is a parameter package, used to transform parameters
            </summary>
            <typeparam name="OutType"></typeparam>
        </member>
        <member name="M:Business.Core.Arg`1.op_Implicit(System.String)~Business.Core.Arg{`0}">
            <summary>
            Arg
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Core.Arg`1.op_Implicit(System.Byte[])~Business.Core.Arg{`0}">
            <summary>
            Arg
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Core.Arg`1.op_Implicit(`0)~Business.Core.Arg{`0}">
            <summary>
            Arg
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Business.Core.Arg`1.Out">
            <summary>
            The final output object
            </summary>
        </member>
        <member name="P:Business.Core.Arg`1.In">
            <summary>
            The first input object
            </summary>
        </member>
        <member name="T:Business.Core.CommandGroup">
            <summary>
            Command grouping
            </summary>
        </member>
        <member name="M:Business.Core.CommandGroup.#ctor(System.Type,System.String)">
            <summary>
            CommandGroup
            </summary>
            <param name="resultTypeDefinition"></param>
            <param name="groupDefault"></param>
        </member>
        <member name="M:Business.Core.CommandGroup.GetCommand(System.String,System.String)">
            <summary>
            GetCommand
            </summary>
            <param name="cmd"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call``1(System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.CallIResult(System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            CallIResult
            </summary>
            <param name="cmd"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call(System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <param name="cmd"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call``1(System.String,System.Object[],Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.CallIResult(System.String,System.Object[],Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            CallIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call(System.String,System.Object[],Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            Call
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call``1(System.String,System.Object[],System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.CallIResult(System.String,System.Object[],System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call(System.String,System.Object[],System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.CallIResult(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            CallIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            Call
            </summary>
            <param name="cmd"></param>
            <param name="args"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.CallIResult(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            CallIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.Call(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall``1(System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncIResult(System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncIResult
            </summary>
            <param name="cmd"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall(System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <param name="cmd"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall``1(System.String,System.Object[],Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncIResult(System.String,System.Object[],Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            AsyncIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall(System.String,System.Object[],Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            AsyncCall
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncIResult(System.String,System.Object[],System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall``1(System.String,System.Object[],System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall(System.String,System.Object[],System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncIResult(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            AsyncIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall(System.String,System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[],System.String)">
            <summary>
            AsyncCall
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncIResult(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncIResult
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.CommandGroup.AsyncCall(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <param name="cmd"></param>
            <param name="parameters"></param>
            <param name="group"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Command">
            <summary>
            Command
            </summary>
        </member>
        <member name="M:Business.Core.Command.#ctor(System.Func{System.Object[],System.Object},Business.Core.Meta.MetaData,System.String,System.String)">
            <summary>
            Command
            </summary>
            <param name="call"></param>
            <param name="meta"></param>
            <param name="key"></param>
            <param name="group"></param>
        </member>
        <member name="M:Business.Core.Command.StatisArgs">
            <summary>
            Statistics of real submission parameters and archiving
            </summary>
        </member>
        <member name="M:Business.Core.Command.GetParametersObjects(System.Object)">
            <summary>
            Convert parameter object to array
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.GetArgsUse(Business.Core.Annotations.UseEntry[],System.Action{System.Object[],System.Int32,Business.Core.Meta.Args,Business.Core.Meta.ArgGroup})">
            <summary>
            GetArgsUse
            </summary>
            <param name="useObj"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.GetAgs(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            GetAgs
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.GetAgs(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            GetAgs
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.Call(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.Call``1(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.CallIResult(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            CallIResult
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.Call(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.Call``1(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            Call
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.CallIResult(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            CallIResult
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.AsyncCall(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.AsyncCall``1(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.AsyncIResult(System.Collections.Generic.IDictionary{System.String,System.String},Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncIResult
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.AsyncCall(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.AsyncCall``1(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncCall
            </summary>
            <typeparam name="Result"></typeparam>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Command.AsyncIResult(System.Object[],Business.Core.Annotations.UseEntry[])">
            <summary>
            AsyncIResult
            </summary>
            <param name="parameters"></param>
            <param name="useObj"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Core.Command.key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Business.Core.Command.group">
            <summary>
            Generate only documents for the specified group
            </summary>
        </member>
        <member name="P:Business.Core.Command.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="P:Business.Core.Command.HasArgSingle">
            <summary>
            HasArgSingle
            </summary>
        </member>
        <member name="P:Business.Core.Command.HasHttpFile">
            <summary>
            HasHttpFile
            </summary>
        </member>
        <member name="P:Business.Core.Command.ParametersType">
            <summary>
            Parameter type called
            </summary>
        </member>
        <member name="P:Business.Core.Command.Parameters">
            <summary>
            Parameter list without token
            </summary>
        </member>
        <member name="T:Business.Core.Meta.ArgGroup">
            <summary>
            ArgGroup
            </summary>
        </member>
        <member name="M:Business.Core.Meta.ArgGroup.#ctor(System.String)">
            <summary>
            ArgGroup
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Business.Core.Meta.ArgGroup.#ctor(Business.Core.Utils.ReadOnlyCollection{Business.Core.Annotations.Ignore},System.Boolean,Business.Core.Utils.ReadOnlyCollection{Business.Core.Annotations.ArgumentAttribute},System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            ArgGroup
            </summary>
            <param name="ignore"></param>
            <param name="ignoreArg"></param>
            <param name="attrs"></param>
            <param name="alias"></param>
            <param name="path"></param>
            <param name="owner"></param>
            <param name="root"></param>
            <param name="httpFile"></param>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Ignore">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.IgnoreArg">
            <summary>
            IgnoreArg
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Attrs">
            <summary>
            Attrs
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Owner">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Root">
            <summary>
            Root
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.IArgInLogger">
            <summary>
            IArgInLogger
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ArgGroup.HttpFile">
            <summary>
            HttpFile
            </summary>
        </member>
        <member name="T:Business.Core.Meta.MemberDefinitionCode">
            <summary>
            MemberDefinitionCode
            </summary>
        </member>
        <member name="F:Business.Core.Meta.MemberDefinitionCode.No">
            <summary>
            No
            </summary>
        </member>
        <member name="F:Business.Core.Meta.MemberDefinitionCode.Definition">
            <summary>
            Definition
            </summary>
        </member>
        <member name="F:Business.Core.Meta.MemberDefinitionCode.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Business.Core.Meta.MemberDefinitionCode.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:Business.Core.Meta.ITypeDefinition`1">
            <summary>
            ITypeDefinition
            </summary>
            <typeparam name="TypeDefinition"></typeparam>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.LastType">
            <summary>
            LastType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.CurrentOrigType">
            <summary>
            Remove IArg type
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.CurrentType">
            <summary>
            Remove IArg Null type
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.HasDefinition">
            <summary>
            HasDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.HasCollection">
            <summary>
            HasCollection
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.HasDictionary">
            <summary>
            HasDictionary
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.Nullable">
            <summary>
            Nullable
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.FullName">
            <summary>
            FullName
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.MemberDefinition">
            <summary>
            MemberDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.HasToken">
            <summary>
            HasToken
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.HasDefaultValue">
            <summary>
            HasDefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Business.Core.Meta.ITypeDefinition`1.Childrens">
            <summary>
            Childrens
            </summary>
        </member>
        <member name="T:Business.Core.Meta.Args">
            <summary>
            Argument
            </summary>
        </member>
        <member name="M:Business.Core.Meta.Args.#ctor(System.String,System.Type,System.Type,System.Type,System.Type,System.Type,System.Int32,System.Object,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Business.Core.Utils.Accessor,Business.Core.Utils.ConcurrentReadOnlyDictionary{System.String,Business.Core.Meta.ArgGroup},Business.Core.Utils.ReadOnlyCollection{Business.Core.Meta.Args},Business.Core.Utils.ReadOnlyCollection{Business.Core.Meta.Args},System.Boolean,System.Boolean,System.Boolean,System.Type,System.Type,Business.Core.Annotations.UseAttribute,System.Boolean,System.Boolean,System.String,System.String,Business.Core.Meta.MemberDefinitionCode,System.Boolean)">
            <summary>
            Argument
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="origType"></param>
            <param name="lastType"></param>
            <param name="currentOrigType"></param>
            <param name="currentType"></param>
            <param name="position"></param>
            <param name="defaultValue"></param>
            <param name="hasDefaultValue"></param>
            <param name="defaultTypeValue"></param>
            <param name="hasDictionary"></param>
            <param name="hasCollection"></param>
            <param name="hasCollectionIArg"></param>
            <param name="nullable"></param>
            <param name="accessor"></param>
            <param name="group"></param>
            <param name="children"></param>
            <param name="childrens"></param>
            <param name="hasLower"></param>
            <param name="hasDefinition"></param>
            <param name="hasIArg"></param>
            <param name="iArgOutType"></param>
            <param name="iArgInType"></param>
            <param name="use"></param>
            <param name="useType"></param>
            <param name="hasToken"></param>
            <param name="methodTypeFullName"></param>
            <param name="fullName"></param>
            <param name="memberDefinition"></param>
            <param name="hasCast"></param>
        </member>
        <member name="P:Business.Core.Meta.Args.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.OrigType">
            <summary>
            OrigType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.LastType">
            <summary>
            LastType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.CurrentOrigType">
            <summary>
            Remove IArg type
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.CurrentType">
            <summary>
            Remove IArg Null type
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasDefaultValue">
            <summary>
            HasDefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.DefaultTypeValue">
            <summary>
            DefaultTypeValue
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasDictionary">
            <summary>
            HasDictionary
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasCollection">
            <summary>
            HasCollection
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasCollectionIArg">
            <summary>
            HasCollectionIArg
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Nullable">
            <summary>
            Nullable
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Accessor">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Childrens">
            <summary>
            Childrens
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasLower">
            <summary>
            Whether there are children
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasDefinition">
            <summary>
            HasDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.IArgOutType">
            <summary>
            IArgOutType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.IArgInType">
            <summary>
            IArgInType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasIArg">
            <summary>
            HasIArg
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Use">
            <summary>
            Use
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.UseType">
            <summary>
            UseType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasToken">
            <summary>
            HasToken
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.MethodTypeFullName">
            <summary>
            MethodTypeFullName
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.FullName">
            <summary>
            FullName
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.MemberDefinition">
            <summary>
            xml using
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.HasCast">
            <summary>
            HasCast
            </summary>
        </member>
        <member name="P:Business.Core.Meta.Args.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="T:Business.Core.Meta.MetaLogger">
            <summary>
            MetaLogger
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaLogger.Record">
            <summary>
            Record
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaLogger.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaLogger.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:Business.Core.Meta.CommandGroup">
            <summary>
            CommandGroup
            </summary>
        </member>
        <member name="M:Business.Core.Meta.CommandGroup.#ctor(Business.Core.Utils.ReadOnlyDictionary{System.String,Business.Core.Annotations.CommandAttribute},Business.Core.Utils.ReadOnlyDictionary{System.String,Business.Core.Utils.ReadOnlyDictionary{System.String,Business.Core.Annotations.CommandAttribute}})">
            <summary>
            CommandGroup
            </summary>
            <param name="group"></param>
            <param name="full"></param>
        </member>
        <member name="P:Business.Core.Meta.CommandGroup.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Meta.CommandGroup.Full">
            <summary>
            Full
            </summary>
        </member>
        <member name="T:Business.Core.Meta.MetaData">
            <summary>
            MetaData
            </summary>
        </member>
        <member name="M:Business.Core.Meta.MetaData.ToString">
            <summary>
            Name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Meta.MetaData.#ctor(System.Func{System.Object,System.Object[],System.Object},Business.Core.Meta.CommandGroup,Business.Core.Utils.ReadOnlyCollection{Business.Core.Meta.Args},Business.Core.Utils.ReadOnlyCollection{Business.Core.Meta.Args},Business.Core.Utils.ReadOnlyCollection{Business.Core.Meta.Args},Business.Core.Utils.ReadOnlyCollection{Business.Core.Meta.Args},Business.Core.Utils.ReadOnlyDictionary{System.String,Business.Core.Meta.MetaLogger},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Type,System.Type,System.Type,System.Type,System.Object[],System.Collections.Generic.List{Business.Core.Annotations.AttributeBase},System.Int32,System.String,Business.Core.Utils.ConcurrentReadOnlyDictionary{System.Int32,System.Type},System.String,Business.Core.Annotations.DocAttribute)">
            <summary>
            MetaData
            </summary>
            <param name="accessor"></param>
            <param name="commandGroup"></param>
            <param name="args"></param>
            <param name="argAll"></param>
            <param name="iArgs"></param>
            <param name="tokens"></param>
            <param name="metaLogger"></param>
            <param name="path"></param>
            <param name="name"></param>
            <param name="fullName"></param>
            <param name="business"></param>
            <param name="hasAsync"></param>
            <param name="hasValueTask"></param>
            <param name="hasReturn"></param>
            <param name="hasIResult"></param>
            <param name="hasIResultGeneric"></param>
            <param name="returnType"></param>
            <param name="resultTypeDefinition"></param>
            <param name="resultType"></param>
            <param name="argTypeDefinition"></param>
            <param name="defaultValue"></param>
            <param name="attributes"></param>
            <param name="position"></param>
            <param name="groupDefault"></param>
            <param name="useTypePosition"></param>
            <param name="methodTypeFullName"></param>
            <param name="doc"></param>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Accessor">
            <summary>
            Accessor
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.CommandGroup">
            <summary>
            CommandGroup
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Args">
            <summary>
            Args
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ArgAll">
            <summary>
            ArgAll
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.IArgs">
            <summary>
            IArgs
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Tokens">
            <summary>
            Tokens
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.MetaLogger">
            <summary>
            MetaLogger
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.FullName">
            <summary>
            FullName
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Business">
            <summary>
            Business
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.HasReturn">
            <summary>
            HasReturn
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.HasIResult">
            <summary>
            HasIResult
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.HasIResultGeneric">
            <summary>
            HasIResultGeneric
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.HasObject">
            <summary>
            HasObject
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ReturnType">
            <summary>
            ReturnType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ReturnValueTaskType">
            <summary>
            ReturnValueTaskType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ResultTypeDefinition">
            <summary>
            ResultTypeDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ResultType">
            <summary>
            ResultType
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ResultGeneric">
            <summary>
            ResultGeneric
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.ArgTypeDefinition">
            <summary>
            ArgTypeDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.HasAsync">
            <summary>
            HasAsync
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.HasValueTask">
            <summary>
            HasValueTask
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Attributes">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.GroupDefault">
            <summary>
            GroupDefault
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.UseTypePosition">
            <summary>
            UseTypePosition
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.MethodTypeFullName">
            <summary>
            MethodTypeFullName
            </summary>
        </member>
        <member name="P:Business.Core.Meta.MetaData.Doc">
            <summary>
            Doc
            </summary>
        </member>
        <member name="T:Business.Core.IBootstrap">
            <summary>
            IBootstrap
            </summary>
        </member>
        <member name="P:Business.Core.IBootstrap.Config">
            <summary>
            Config
            </summary>
        </member>
        <member name="M:Business.Core.IBootstrap.UseDoc(System.String,System.Action{Business.Core.Document.Options})">
            <summary>
            UseDoc
            </summary>
        </member>
        <member name="M:Business.Core.IBootstrap.UseResultType(System.Type)">
            <summary>
            UseResultType
            </summary>
        </member>
        <member name="M:Business.Core.IBootstrap.UseArgType(System.Type)">
            <summary>
            UseArgType
            </summary>
        </member>
        <member name="M:Business.Core.IBootstrap.UseLogger(Business.Core.Logger)">
            <summary>
            Log callback for all business classes
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.IBootstrap.Build">
            <summary>
            Build
            </summary>
        </member>
        <member name="T:Business.Core.BootstrapConfig">
            <summary>
            BootstrapConfig
            </summary>
        </member>
        <member name="M:Business.Core.BootstrapConfig.#ctor">
            <summary>
            BootstrapConfig
            </summary>
        </member>
        <member name="M:Business.Core.BootstrapConfig.#ctor(Business.Core.Auth.IInterceptor,System.Object[],System.Func{System.Type,System.Object},System.Type)">
            <summary>
            BootstrapConfig
            </summary>
            <param name="interceptor"></param>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="type"></param>
        </member>
        <member name="P:Business.Core.BootstrapConfig.Use">
            <summary>
            Use
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.UseDoc">
            <summary>
            UseDoc
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.Interceptor">
            <summary>
            Interceptor
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.ConstructorArguments">
            <summary>
            ConstructorArguments
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.ConstructorArgumentsFunc">
            <summary>
            ConstructorArgumentsFunc
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.ResultType">
            <summary>
            ResultType
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.ArgType">
            <summary>
            ArgType
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.BuildBefore">
            <summary>
            BuildBefore
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.BuildAfter">
            <summary>
            BuildAfter
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.Logger">
            <summary>
            Log callback for all business classes
            </summary>
        </member>
        <member name="T:Business.Core.BootstrapConfig.UseDocConfig">
            <summary>
            UseDocConfig
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.UseDocConfig.OutDir">
            <summary>
            OutDir
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.UseDocConfig.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Business.Core.BootstrapConfig.UseDocConfig.Use">
            <summary>
            Use
            </summary>
        </member>
        <member name="T:Business.Core.Bootstrap">
            <summary>
            Bootstrap
            </summary>
        </member>
        <member name="M:Business.Core.Bootstrap.#ctor(Business.Core.BootstrapConfig)">
            <summary>
            Bootstrap
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Business.Core.Bootstrap.Config">
            <summary>
            Config
            </summary>
        </member>
        <member name="M:Business.Core.Bootstrap.Create``1(System.Object[])">
            <summary>
            Initialize a Generic proxy class
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.Create``1(System.Object[],System.Func{System.Type,System.Object},Business.Core.Auth.IInterceptor)">
            <summary>
            Initialize a Generic proxy class
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.Create(System.Type,System.Object[])">
            <summary>
            Initialize a Type proxy class
            </summary>
            <param name="type"></param>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.Create(System.Type,System.Object[],System.Func{System.Type,System.Object},Business.Core.Auth.IInterceptor)">
            <summary>
            Initialize a Type proxy class
            </summary>
            <param name="type"></param>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.CreateAll(System.Object[])">
            <summary>
            bootstrap all Business class
            </summary>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.CreateAll(System.Object[],System.Func{System.Type,System.Object},Business.Core.Auth.IInterceptor)">
            <summary>
            bootstrap all Business class
            </summary>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.CreateAll``1(System.Object[])">
            <summary>
            bootstrap all Business class
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.CreateAll``1(System.Object[],System.Func{System.Type,System.Object},Business.Core.Auth.IInterceptor)">
            <summary>
            bootstrap all Business class
            </summary>
            <typeparam name="Business"></typeparam>
            <param name="constructorArguments"></param>
            <param name="constructorArgumentsFunc"></param>
            <param name="interceptor"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.Build">
            <summary>
            Build
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.UseDoc(System.String,System.Action{Business.Core.Document.Options})">
            <summary>
            Generating Document Model for All Business Classes. business.doc
            </summary>
            <param name="outDir"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.UseDoc(System.Action{Business.Core.Document.Options})">
            <summary>
            Generating Document Model for All Business Classes. business.doc
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.UseResultType(System.Type)">
            <summary>
            use result type
            </summary>
            <param name="resultType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.UseArgType(System.Type)">
            <summary>
            use arg type
            </summary>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap.UseLogger(Business.Core.Logger)">
            <summary>
            Log callback for all business classes
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Bootstrap`1">
            <summary>
            Bootstrap
            </summary>
            <typeparam name="Business"></typeparam>
        </member>
        <member name="M:Business.Core.Bootstrap`1.#ctor(Business.Core.BootstrapConfig)">
            <summary>
            Bootstrap
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Business.Core.Bootstrap`1.Config">
            <summary>
            Config
            </summary>
        </member>
        <member name="M:Business.Core.Bootstrap`1.Build">
            <summary>
            Build
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap`1.UseDoc(System.String,System.Action{Business.Core.Document.Options})">
            <summary>
            Generating Document Model for All Business Classes. business.doc
            </summary>
            <param name="outDir"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap`1.UseDoc(System.Action{Business.Core.Document.Options})">
            <summary>
            UseDoc
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap`1.UseResultType(System.Type)">
            <summary>
            use result type
            </summary>
            <param name="resultType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap`1.UseArgType(System.Type)">
            <summary>
            use arg type
            </summary>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Bootstrap`1.UseLogger(Business.Core.Logger)">
            <summary>
            Log callback for all business classes
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.BootstrapAll">
            <summary>
            BootstrapAll
            </summary>
        </member>
        <member name="M:Business.Core.BootstrapAll.#ctor(Business.Core.BootstrapConfig)">
            <summary>
            BootstrapAll
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Business.Core.BootstrapAll.Config">
            <summary>
            Config
            </summary>
        </member>
        <member name="M:Business.Core.BootstrapAll.Build(System.String[],System.String[])">
            <summary>
            Load all business classes in the run directory
            </summary>
            <param name="assemblyFiles"></param>
            <param name="businessTypeFullName"></param>
        </member>
        <member name="M:Business.Core.BootstrapAll.UseDoc(System.String,System.Action{Business.Core.Document.Options})">
            <summary>
            Generating Document Model for All Business Classes. business.doc
            </summary>
            <param name="outDir"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll.UseDoc(System.Action{Business.Core.Document.Options})">
            <summary>
            UseDoc
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll.UseResultType(System.Type)">
            <summary>
            use result type
            </summary>
            <param name="resultType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll.UseArgType(System.Type)">
            <summary>
            use arg type
            </summary>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll.UseLogger(Business.Core.Logger)">
            <summary>
            Log callback for all business classes
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.BootstrapAll`1">
            <summary>
            BootstrapAll
            </summary>
            <typeparam name="Business"></typeparam>
        </member>
        <member name="F:Business.Core.BootstrapAll`1.BusinessList">
            <summary>
            BusinessList
            </summary>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.#ctor(Business.Core.BootstrapConfig)">
            <summary>
            BootstrapAll
            </summary>
            <param name="config"></param>
        </member>
        <member name="P:Business.Core.BootstrapAll`1.Config">
            <summary>
            Config
            </summary>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.Build(System.String[],System.String[])">
            <summary>
            Load all business classes in the run directory
            </summary>
            <param name="assemblyFiles"></param>
            <param name="businessTypeFullName"></param>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.UseDoc(System.String,System.Action{Business.Core.Document.Options})">
            <summary>
            Generating Document Model for All Business Classes. business.doc
            </summary>
            <param name="outDir"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.UseDoc(System.Action{Business.Core.Document.Options})">
            <summary>
            Generating Document Model for All Business Classes. business.doc
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.UseResultType(System.Type)">
            <summary>
            use result type
            </summary>
            <param name="resultType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.UseArgType(System.Type)">
            <summary>
            use arg type
            </summary>
            <param name="argType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BootstrapAll`1.UseLogger(Business.Core.Logger)">
            <summary>
            Log callback for all business classes
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.Xml">
            <summary>
            doc .xml
            </summary>
        </member>
        <member name="M:Business.Core.Document.Xml.DeserializeDoc(System.String)">
            <summary>
            doc .xml
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Document.Xml.WhitespaceTrim(System.String)">
            <summary>
            WhitespaceTrim
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Core.Document.Xml._assembly">
            <summary>
            _assembly
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.members">
            <summary>
            members
            </summary>
        </member>
        <member name="T:Business.Core.Document.Xml.assembly">
            <summary>
            assembly
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.assembly.name">
            <summary>
            name
            </summary>
        </member>
        <member name="M:Business.Core.Document.Xml.assembly.ToString">
            <summary>
            name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.Xml.member">
            <summary>
            member
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.summary">
            <summary>
            summary
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member._params">
            <summary>
            _params
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.returns">
            <summary>
            returns
            </summary>
        </member>
        <member name="M:Business.Core.Document.Xml.member.ToString">
            <summary>
            name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.Xml.member.param">
            <summary>
            param
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.param.name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.param.text">
            <summary>
            text
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.param.para">
            <summary>
            para
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.param.sub">
            <summary>
            sub
            </summary>
        </member>
        <member name="M:Business.Core.Document.Xml.member.param.ToString">
            <summary>
            $"{name} {text}"
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.Xml.member.values">
            <summary>
            values
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.values.text">
            <summary>
            text
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.values.para">
            <summary>
            para
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.values.sub">
            <summary>
            sub
            </summary>
        </member>
        <member name="M:Business.Core.Document.Xml.member.values.ToString">
            <summary>
            text
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.Xml.member.para">
            <summary>
            para
            </summary>
        </member>
        <member name="F:Business.Core.Document.Xml.member.para.text">
            <summary>
            text
            </summary>
        </member>
        <member name="M:Business.Core.Document.Xml.member.para.ToString">
            <summary>
            text
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.DocGroup">
            <summary>
            DocGroup
            </summary>
        </member>
        <member name="M:Business.Core.Document.DocGroup.#ctor(Business.Core.Annotations.DocGroupAttribute)">
            <summary>
            DocGroup
            </summary>
            <param name="docGroup"></param>
        </member>
        <member name="M:Business.Core.Document.DocGroup.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            DocGroup
            </summary>
            <param name="group"></param>
            <param name="badge"></param>
            <param name="active"></param>
            <param name="position"></param>
        </member>
        <member name="P:Business.Core.Document.DocGroup.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocGroup.Badge">
            <summary>
            Badge
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocGroup.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="T:Business.Core.Document.DocGroup.EqualityComparer">
            <summary>
            EqualityComparer
            </summary>
        </member>
        <member name="M:Business.Core.Document.DocGroup.EqualityComparer.Equals(Business.Core.Document.DocGroup,Business.Core.Document.DocGroup)">
            <summary>
            Equals
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Document.DocGroup.EqualityComparer.GetHashCode(Business.Core.Document.DocGroup)">
            <summary>
            GetHashCode
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Core.Document.DocGroup.comparer">
            <summary>
            comparer
            </summary>
        </member>
        <member name="T:Business.Core.Document.DocInfo">
            <summary>
            DocInfo
            </summary>
        </member>
        <member name="M:Business.Core.Document.DocInfo.#ctor(Business.Core.Annotations.DocAttribute,System.Int32,System.String)">
            <summary>
            DocInfo
            </summary>
            <param name="alias"></param>
            <param name="position"></param>
            <param name="key"></param>
        </member>
        <member name="P:Business.Core.Document.DocInfo.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocInfo.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocInfo.Badge">
            <summary>
            Badge
            </summary>
        </member>
        <member name="T:Business.Core.Document.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Debug">
            <summary>
            Whether to render the Debug element in the UI, true is on by default
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Benchmark">
            <summary>
            Whether to render the Benchmark element in the UI, true is on by default
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Testing">
            <summary>
            Whether to render the Testing element in the UI
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Group">
            <summary>
            Generate only documents for the specified group
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.GroupSelect">
            <summary>
            Currently selected group
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.GroupEnable">
            <summary>
            Whether to render the Group element in the UI
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.SetToken">
            <summary>
            Whether to render the SetToken element in the UI
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Navigtion">
            <summary>
            Whether to open the side navigation bar
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.BenchmarkJSON">
            <summary>
            Benchmark tests whether the passed parameters are JSON serialized. By default false, does not need to be serialized
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.Config">
            <summary>
            Other configurations
            </summary>
        </member>
        <member name="P:Business.Core.Document.Options.CamelCase">
            <summary>
            CamelCase
            </summary>
        </member>
        <member name="T:Business.Core.Document.IDoc">
            <summary>
            IDoc
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.Alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.GroupDefault">
            <summary>
            GroupDefault
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDoc.DocGroup">
            <summary>
            DocGroup
            </summary>
        </member>
        <member name="T:Business.Core.Document.IDoc`1">
            <summary>
            IDoc
            </summary>
            <typeparam name="DocArg"></typeparam>
        </member>
        <member name="P:Business.Core.Document.IDoc`1.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="T:Business.Core.Document.IMember`1">
            <summary>
            IMember
            </summary>
            <typeparam name="DocArg"></typeparam>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.AliasGroup">
            <summary>
            AliasGroup
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.HasReturn">
            <summary>
            HasReturn
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.HasIResult">
            <summary>
            HasIResult
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Returns">
            <summary>
            Returns
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.DescriptionResult">
            <summary>
            DescriptionResult
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.HasToken">
            <summary>
            HasToken
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Args">
            <summary>
            Args
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.ArgSingle">
            <summary>
            ArgSingle
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.HttpFile">
            <summary>
            HttpFile
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Testing">
            <summary>
            Testing
            </summary>
        </member>
        <member name="P:Business.Core.Document.IMember`1.Annotations">
            <summary>
            Annotations
            </summary>
        </member>
        <member name="T:Business.Core.Document.IDocArg`1">
            <summary>
            IDocArg
            </summary>
            <typeparam name="DocArg"></typeparam>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.LastType">
            <summary>
            LastType
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.ValueType">
            <summary>
            ValueType
            </summary>
        </member>
        <member name="P:Business.Core.Document.IDocArg`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Business.Core.Document.Doc`1">
            <summary>
            Doc
            </summary>
            <typeparam name="DocArg"></typeparam>
        </member>
        <member name="P:Business.Core.Document.Doc`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.Alias">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.Business#Core#Document#IDoc#Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.GroupDefault">
            <summary>
            GroupDefault
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Business.Core.Document.Doc`1.DocGroup">
            <summary>
            DocGroup
            </summary>
        </member>
        <member name="M:Business.Core.Document.Doc`1.ToString">
            <summary>
            Json format
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Document.Member`1">
            <summary>
            Member
            </summary>
            <typeparam name="DocArg"></typeparam>
        </member>
        <member name="P:Business.Core.Document.Member`1.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Alias">
            <summary>
            Friendly name
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.AliasGroup">
            <summary>
            Friendly name group
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.HasReturn">
            <summary>
            HasReturn
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.HasIResult">
            <summary>
            HasIResult
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Returns">
            <summary>
            Returns
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.DescriptionResult">
            <summary>
            DescriptionResult
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.HasToken">
            <summary>
            HasToken
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Args">
            <summary>
            Args
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.ArgSingle">
            <summary>
            ArgSingle
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.HttpFile">
            <summary>
            HttpFile
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Testing">
            <summary>
            Testing
            </summary>
        </member>
        <member name="P:Business.Core.Document.Member`1.Annotations">
            <summary>
            Annotations
            </summary>
        </member>
        <member name="T:Business.Core.Document.Testing">
            <summary>
            Testing
            </summary>
        </member>
        <member name="M:Business.Core.Document.Testing.#ctor(System.String,System.Object,System.String,System.String)">
            <summary>
            Testing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="result"></param>
            <param name="token"></param>
        </member>
        <member name="P:Business.Core.Document.Testing.Name">
            <summary>
            test key
            </summary>
        </member>
        <member name="P:Business.Core.Document.Testing.Value">
            <summary>
            test args
            </summary>
        </member>
        <member name="P:Business.Core.Document.Testing.Result">
            <summary>
            test result check
            </summary>
        </member>
        <member name="P:Business.Core.Document.Testing.Token">
            <summary>
            test fixed roken
            </summary>
        </member>
        <member name="T:Business.Core.Document.DocArg">
            <summary>
            DocArg
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.DefaultValue">
            <summary>
            DefaultValue
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.LastType">
            <summary>
            LastType
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Array">
            <summary>
            Array
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Dict">
            <summary>
            Dict
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Enums">
            <summary>
            Enums
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.DescriptionTip">
            <summary>
            DescriptionTip
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.UniqueItems">
            <summary>
            UniqueItems
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.OrigName">
            <summary>
            OrigName
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArg.ValueType">
            <summary>
            ValueType
            </summary>
        </member>
        <member name="T:Business.Core.Document.EnumItems">
            <summary>
            EnumItems
            </summary>
        </member>
        <member name="M:Business.Core.Document.EnumItems.#ctor(System.String,System.Int32,System.String)">
            <summary>
            EnumItems
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="description"></param>
        </member>
        <member name="P:Business.Core.Document.EnumItems.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Business.Core.Document.EnumItems.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Business.Core.Document.EnumItems.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Business.Core.Document.Items`1">
            <summary>
            Items
            </summary>
            <typeparam name="DocArg"></typeparam>
        </member>
        <member name="P:Business.Core.Document.Items`1.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Business.Core.Document.Items`1.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:Business.Core.Document.Items`1.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Business.Core.Document.Items`1.Children">
            <summary>
            Children
            </summary>
        </member>
        <member name="P:Business.Core.Document.Items`1.KeyType">
            <summary>
            KeyType
            </summary>
        </member>
        <member name="T:Business.Core.Document.DocArgSource`1">
            <summary>
            TypeDefinition
            </summary>
            <typeparam name="TypeDefinition"></typeparam>
        </member>
        <member name="M:Business.Core.Document.DocArgSource`1.#ctor(System.String,Business.Core.Meta.ITypeDefinition{`0},System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IEnumerable{Business.Core.Document.EnumItems},System.String)">
            <summary>
            DocArgSource
            </summary>
            <param name="group"></param>
            <param name="args"></param>
            <param name="attributes"></param>
            <param name="summary"></param>
            <param name="enums"></param>
            <param name="topTitleArgsName"></param>
        </member>
        <member name="P:Business.Core.Document.DocArgSource`1.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArgSource`1.Args">
            <summary>
            Args
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArgSource`1.Attributes">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArgSource`1.Summary">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArgSource`1.Enums">
            <summary>
            Enums
            </summary>
        </member>
        <member name="P:Business.Core.Document.DocArgSource`1.TopTitleArgsName">
            <summary>
            TopTitleArgsName
            </summary>
        </member>
        <member name="T:Business.Core.IBusiness">
            <summary>
            IBusiness
            </summary>
        </member>
        <member name="P:Business.Core.IBusiness.Logger">
            <summary>
            Log subscription queue
            </summary>
        </member>
        <member name="P:Business.Core.IBusiness.Command">
            <summary>
            Call methods by command
            </summary>
        </member>
        <member name="P:Business.Core.IBusiness.Configer">
            <summary>
            Configurer
            </summary>
        </member>
        <member name="P:Business.Core.IBusiness.BindAfter">
            <summary>
            After binding
            </summary>
        </member>
        <member name="P:Business.Core.IBusiness.BindBefore">
            <summary>
            Before binding
            </summary>
        </member>
        <member name="M:Business.Core.IBusiness.ResultCreate(System.Int32,System.String,System.String,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.IBusiness.ResultCreate``1(``0,System.String,System.Int32,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <typeparam name="Data"></typeparam>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.IBusiness.ResultCreate(System.Object,System.String,System.Int32,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.IBusiness`2">
            <summary>
            IBusiness
            </summary>
            <typeparam name="Result"></typeparam>
            <typeparam name="Arg"></typeparam>
        </member>
        <member name="T:Business.Core.IBusiness`1">
            <summary>
            IBusiness
            </summary>
            <typeparam name="Result"></typeparam>
        </member>
        <member name="T:Business.Core.BusinessBase">
            <summary>
            BusinessBase
            </summary>
        </member>
        <member name="P:Business.Core.BusinessBase.Logger">
            <summary>
            Log subscription queue
            </summary>
        </member>
        <member name="P:Business.Core.BusinessBase.Command">
            <summary>
            Call methods by command
            </summary>
        </member>
        <member name="P:Business.Core.BusinessBase.Configer">
            <summary>
            Configurer
            </summary>
        </member>
        <member name="P:Business.Core.BusinessBase.BindAfter">
            <summary>
            After binding
            </summary>
        </member>
        <member name="P:Business.Core.BusinessBase.BindBefore">
            <summary>
            Before binding
            </summary>
        </member>
        <member name="M:Business.Core.BusinessBase.ResultCreate(System.Int32,System.String,System.String,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BusinessBase.ResultCreate``1(``0,System.String,System.Int32,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <typeparam name="Data"></typeparam>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.BusinessBase.ResultCreate(System.Object,System.String,System.Int32,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.BusinessBase`2">
            <summary>
            BusinessBase
            </summary>
            <typeparam name="Result"></typeparam>
            <typeparam name="Arg"></typeparam>
        </member>
        <member name="T:Business.Core.BusinessBase`1">
            <summary>
            BusinessBase
            </summary>
            <typeparam name="Result"></typeparam>
        </member>
        <member name="T:Business.Core.Logger">
            <summary>
            Log subscription queue
            </summary>
        </member>
        <member name="T:Business.Core.Logger.ValueType">
            <summary>
            Logger value type
            </summary>
        </member>
        <member name="F:Business.Core.Logger.ValueType.All">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Business.Core.Logger.ValueType.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Business.Core.Logger.ValueType.Out">
            <summary>
            Out
            </summary>
        </member>
        <member name="T:Business.Core.Logger.Type">
            <summary>
            Needs of the logging categories
            </summary>
        </member>
        <member name="F:Business.Core.Logger.Type.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:Business.Core.Logger.Type.Record">
            <summary>
            Record
            </summary>
        </member>
        <member name="F:Business.Core.Logger.Type.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Business.Core.Logger.Type.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:Business.Core.Logger.LoggerData">
            <summary>
            Logger data object
            </summary>
        </member>
        <member name="M:Business.Core.Logger.LoggerData.#ctor(System.DateTimeOffset,System.Object,Business.Core.Logger.Type,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Double,System.String,System.String)">
            <summary>
            Logger data object
            </summary>
            <param name="dtt"></param>
            <param name="token"></param>
            <param name="type"></param>
            <param name="value"></param>
            <param name="result"></param>
            <param name="time"></param>
            <param name="member"></param>
            <param name="group"></param>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Dtt">
            <summary>
            Dtt
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Type">
            <summary>
            Logger type
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Value">
            <summary>
            The parameters of the method
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Result">
            <summary>
            The method's Return Value
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Time">
            <summary>
            Method execution time
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Member">
            <summary>
            Method full name
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.Group">
            <summary>
            Used for the command group
            </summary>
        </member>
        <member name="M:Business.Core.Logger.LoggerData.ToString">
            <summary>
            Json format
            </summary>
            <returns></returns>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Type">
            <summary>
            Logger type
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Value">
            <summary>
            The parameters of the method
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Result">
            <summary>
            The method's Return Value
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Time">
            <summary>
            Method execution time
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Member">
            <summary>
            Method full name
            </summary>
        </member>
        <member name="P:Business.Core.Logger.LoggerData.LoggerDataJson.Group">
            <summary>
            Used for the command group
            </summary>
        </member>
        <member name="T:Business.Core.Logger.BatchOptions">
            <summary>
            BatchOptions
            </summary>
        </member>
        <member name="M:Business.Core.Logger.BatchOptions.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            BatchOptions
            </summary>
            <param name="interval">Return log time interval, default System.TimeSpan.Zero equals not enabled, x seconds is reasonable</param>
            <param name="maxNumber">Return log number, less than 1 no restrictions</param>
        </member>
        <member name="P:Business.Core.Logger.BatchOptions.Interval">
            <summary>
            Return log time interval, default System.TimeSpan.Zero equals not enabled, x seconds is reasonable
            </summary>
        </member>
        <member name="P:Business.Core.Logger.BatchOptions.MaxNumber">
            <summary>
            Return log number, less than 1 no restrictions
            </summary>
        </member>
        <member name="F:Business.Core.Logger.loggerQueue">
            <summary>
            loggerQueue
            </summary>
        </member>
        <member name="M:Business.Core.Logger.#ctor(System.Func{Business.Core.Logger.LoggerData,System.Threading.Tasks.ValueTask})">
            <summary>
            Logger
            </summary>
            <param name="call"></param>
        </member>
        <member name="M:Business.Core.Logger.#ctor(System.Func{System.Collections.Generic.IEnumerable{Business.Core.Logger.LoggerData},System.Threading.Tasks.ValueTask},Business.Core.Logger.BatchOptions,System.Nullable{System.Int32})">
            <summary>
            Logger
            </summary>
            <param name="call"></param>
            <param name="batch"></param>
            <param name="maxCapacity">Gets the max capacity of this queue</param>
        </member>
        <member name="T:Business.Core.Configer">
            <summary>
            Configer
            </summary>
        </member>
        <member name="F:Business.Core.Configer.documentFileName">
            <summary>
            Document file name, business.json
            </summary>
        </member>
        <member name="F:Business.Core.Configer.BusinessList">
            <summary>
            BusinessList
            </summary>
        </member>
        <member name="F:Business.Core.Configer.Routes">
            <summary>
            Business
            Business + Group
            Business + Command + Group
            </summary>
        </member>
        <member name="T:Business.Core.Configer.Route">
            <summary>
            Route
            </summary>
        </member>
        <member name="M:Business.Core.Configer.Route.#ctor(System.String,System.String,System.String)">
            <summary>
            Route
            </summary>
            <param name="business"></param>
            <param name="group"></param>
            <param name="command"></param>
        </member>
        <member name="P:Business.Core.Configer.Route.Business">
            <summary>
            Business
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Route.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Route.Command">
            <summary>
            Command
            </summary>
        </member>
        <member name="M:Business.Core.Configer.Route.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Configer.MethodBefore">
            <summary>
            MethodBefore
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MethodBefore.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MethodBefore.Args">
            <summary>
            Args
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MethodBefore.Cancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="T:Business.Core.Configer.MethodAfter">
            <summary>
            MethodAfter
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MethodAfter.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MethodAfter.Args">
            <summary>
            Args
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MethodAfter.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="T:Business.Core.Configer.MethodArgs">
            <summary>
            MethodArgs
            </summary>
        </member>
        <member name="F:Business.Core.Configer.MethodArgs.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Business.Core.Configer.MethodArgs.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:Business.Core.Configer.MethodArgs.HasIArg">
            <summary>
            HasIArg
            </summary>
        </member>
        <member name="F:Business.Core.Configer.MethodArgs.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:Business.Core.Configer.MethodArgs.OutType">
            <summary>
            OutType
            </summary>
        </member>
        <member name="F:Business.Core.Configer.MethodArgs.InType">
            <summary>
            InType
            </summary>
        </member>
        <member name="F:Business.Core.Configer.Xmls">
            <summary>
            Xmls
            </summary>
        </member>
        <member name="F:Business.Core.Configer.JsonOptionsDoc">
            <summary>
            FirstCharToLowerNamingPolicy
            </summary>
        </member>
        <member name="F:Business.Core.Configer.JsonOptionsMultipleParameter">
            <summary>
            Responsible for parsing the overall request data
            </summary>
        </member>
        <member name="M:Business.Core.Configer.#ctor(Business.Core.Annotations.Info,System.Type,System.Type,System.Collections.Generic.List{Business.Core.Annotations.AttributeBase},Business.Core.Auth.IInterceptor,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Configer
            </summary>
            <param name="info"></param>
            <param name="resultTypeDefinition"></param>
            <param name="argTypeDefinition"></param>
            <param name="attributes"></param>
            <param name="interceptor"></param>
            <param name="useTypes"></param>
        </member>
        <member name="P:Business.Core.Configer.MetaData">
            <summary>
            MetaData
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Attributes">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="P:Business.Core.Configer.UseTypes">
            <summary>
            UseTypes
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="P:Business.Core.Configer.ResultTypeDefinition">
            <summary>
            ResultTypeDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Configer.ArgTypeDefinition">
            <summary>
            ArgTypeDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Doc">
            <summary>
            Doc
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Interceptor">
            <summary>
            Interceptor
            </summary>
        </member>
        <member name="P:Business.Core.Configer.DocGroup">
            <summary>
            DocGroup
            </summary>
        </member>
        <member name="P:Business.Core.Configer.DocInfo">
            <summary>
            DocInfo
            </summary>
        </member>
        <member name="P:Business.Core.Configer.Logger">
            <summary>
            Logger
            </summary>
        </member>
        <member name="P:Business.Core.Configer.CallBeforeMethod">
            <summary>
            Before the method is successfully invoked
            </summary>
        </member>
        <member name="P:Business.Core.Configer.CallAfterMethod">
            <summary>
            After the method has been successfully invoked
            </summary>
        </member>
        <member name="P:Business.Core.Configer.MemberSetAfter">
            <summary>
            After the MemberSet has been successfully invoked
            </summary>
        </member>
        <member name="T:Business.Core.Result.IResult">
            <summary>
            IResult
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.State">
            <summary>
            The results of the state is greater than or equal 
            to 1: success, equal to 0: system level exceptions, less than 0: business class error.
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.Message">
            <summary>
            Success can be null
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.Data">
            <summary>
            Specific Byte/Json data objects
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.HasData">
            <summary>
            Whether there is value
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.Callback">
            <summary>
            Gets the token of this result, used for callback
            </summary>
        </member>
        <member name="M:Business.Core.Result.IResult.ToBytes(System.Boolean)">
            <summary>
            ProtoBuf,MessagePack or Other
            </summary>
            <param name="dataBytes"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.IResult.ToString">
            <summary>
            Json
            </summary>
            <returns></returns>
        </member>
        <member name="P:Business.Core.Result.IResult.GenericDefinition">
            <summary>
            System.Type object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
        </member>
        <member name="P:Business.Core.Result.IResult.HasDataResult">
            <summary>
            Return data or not
            </summary>
        </member>
        <member name="T:Business.Core.Result.IResult`1">
            <summary>
            IResult
            </summary>
            <typeparam name="DataType"></typeparam>
        </member>
        <member name="P:Business.Core.Result.IResult`1.Data">
            <summary>
            Specific Byte/Json data objects
            </summary>
        </member>
        <member name="T:Business.Core.Result.ResultFactory">
            <summary>
            Result factory
            </summary>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate(System.Type,System.Type,System.Int32,System.String,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="resultType"></param>
            <param name="resultTypeDefinition"></param>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate(Business.Core.Meta.MetaData,System.Int32,System.String,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="meta"></param>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate(System.Type,System.Type,System.Object,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="resultTypeDefinition"></param>
            <param name="dataType"></param>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <param name="checkData"></param>
            <param name="hasData"></param>
            <param name="hasDataResult"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate``1(System.Type,``0,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <typeparam name="Data"></typeparam>
            <param name="resultTypeDefinition"></param>
            <param name="data"></param>
            <param name="message"></param>
            <param name="state"></param>
            <param name="callback"></param>
            <param name="checkData"></param>
            <param name="hasData"></param>
            <param name="hasDataResult"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate``1(System.Type,System.Int32,System.String,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <typeparam name="Data"></typeparam>
            <param name="resultTypeDefinition"></param>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate(System.Type,System.Int32,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="resultTypeDefinition"></param>
            <param name="state"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultFactory.ResultCreate(System.Type,System.Int32,System.String,System.String)">
            <summary>
            Used to create the IResult returns object
            </summary>
            <param name="resultTypeDefinition"></param>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Core.Result.ResultObject`1">
            <summary>
            result
            </summary>
            <typeparam name="Type"></typeparam>
        </member>
        <member name="M:Business.Core.Result.ResultObject`1.#ctor(System.Type,`0,System.Int32,System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Activator.CreateInstance
            </summary>
            <param name="dataType"></param>
            <param name="data"></param>
            <param name="state"></param>
            <param name="message"></param>
            <param name="callback"></param>
            <param name="genericDefinition"></param>
            <param name="checkData"></param>
            <param name="hasData"></param>
            <param name="hasDataResult"></param>
        </member>
        <member name="M:Business.Core.Result.ResultObject`1.#ctor(`0,System.Int32,System.String,System.Boolean)">
            <summary>
            MessagePack.MessagePackSerializer.Serialize(this)
            </summary>
            <param name="data"></param>
            <param name="state"></param>
            <param name="message"></param>
            <param name="hasData"></param>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.State">
            <summary>
            The results of the state is greater than or equal to 1: success, equal to 0: system level exceptions, less than 0: business class error.
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.Message">
            <summary>
            Success can be null
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.Business#Core#Result#IResult#Data">
            <summary>
            Specific dynamic data objects
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.Data">
            <summary>
            Specific Byte/Json data objects
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.HasData">
            <summary>
            Whether there is value
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.Callback">
            <summary>
            Gets the token of this result, used for callback
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.GenericDefinition">
            <summary>
            GenericDefinition
            </summary>
        </member>
        <member name="P:Business.Core.Result.ResultObject`1.HasDataResult">
            <summary>
            Return data or not
            </summary>
        </member>
        <member name="M:Business.Core.Result.ResultObject`1.ToString">
            <summary>
            Json format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Core.Result.ResultObject`1.ToBytes(System.Boolean)">
            <summary>
            ProtoBuf,MessagePack or Other
            </summary>
            <param name="dataBytes"></param>
            <returns></returns>
        </member>
        <member name="T:TypeNameFormatter.TypeName">
            <summary>
              Contains the two extension methods
              <see cref="M:TypeNameFormatter.TypeName.AppendFormattedName(System.Text.StringBuilder,System.Type,TypeNameFormatter.TypeNameFormatOptions)"/> and
              <see cref="M:TypeNameFormatter.TypeName.GetFormattedName(System.Type,TypeNameFormatter.TypeNameFormatOptions)"/>.
            </summary>
        </member>
        <member name="M:TypeNameFormatter.TypeName.AppendFormattedName(System.Text.StringBuilder,System.Type,TypeNameFormatter.TypeNameFormatOptions)">
            <summary>
              Appends a string representation of the specified type to this instance.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> instance to which to append.</param>
            <param name="type">The <see cref="T:System.Type"/> of which a string representation should be appended.</param>
            <param name="options">Any combination of formatting options that should be applied. (Optional.)</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:TypeNameFormatter.TypeName.GetFormattedName(System.Type,TypeNameFormatter.TypeNameFormatOptions)">
            <summary>
              Gets a string representation of this instance.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of which a string representation is requested.</param>
            <param name="options">Any combination of formatting options that should be applied. (Optional.)</param>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="M:TypeNameFormatter.TypeName.IsSet(TypeNameFormatter.TypeNameFormatOptions,TypeNameFormatter.TypeNameFormatOptions)">
            <remarks>
              Replacement for <see cref="M:System.Enum.HasFlag(System.Enum)"/>
              which may be slow or even unavailable on earlier target frameworks.
            </remarks>
        </member>
        <member name="M:TypeNameFormatter.TypeName.GetDeclaredProperties(System.Type)">
            <remarks>
              Allows uniform reflection across all target frameworks.
            </remarks>
        </member>
        <member name="M:TypeNameFormatter.TypeName.GetGenericTypeArguments(System.Type)">
            <remarks>
              Allows uniform reflection across all target frameworks.
            </remarks>
        </member>
        <member name="M:TypeNameFormatter.TypeName.IsGenericType(System.Type)">
            <remarks>
              Allows uniform reflection across all target frameworks.
            </remarks>
        </member>
        <member name="M:TypeNameFormatter.TypeName.IsConstructedGenericType(System.Type)">
            <remarks>
              Allows uniform reflection across all target frameworks.
            </remarks>
        </member>
        <member name="T:TypeNameFormatter.TypeNameFormatOptions">
            <summary>
              An enumeration of available options when a <see cref="T:System.Type"/> name's string representation is requested.
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.Default">
            <summary>
              The default type name formatting options.
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.Namespaces">
            <summary>
              Specifies that a type's namespace should be included.
              <example>
                For example, the type <see cref="T:System.Action"/> is formatted as <c>"Action"</c> by default.
                When this flag is specified, it will be formatted as <c>"System.Action"</c>.
              </example>
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.NoAnonymousTypes">
            <summary>
              Specifies that anonymous types should not be transformed to C#-like syntax.
              <example>
              For example, the anonymous type of <c>"new { Name = "Blob", Count = 17 }"</c> is formatted as
              <c>"{string Name, int Count}"</c> by default. When this flag is specified, it will be formatted as
              the raw "display class" name, which looks something like <c>"&lt;&gt;f__AnonymousType5&lt;string, int&gt;"</c>.
              </example>
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.NoGenericParameterNames">
            <summary>
              Specifies that an open generic type's parameter names should be omitted.
              <example>
                For example, the open generic type <see cref="T:System.IEquatable`1"/> is formatted as <c>"IEquatable&lt;T&gt;"</c> by default.
                When this flag is specified, it will be formatted as <c>"IEquatable&lt;&gt;"</c>.
              </example>
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.NoKeywords">
            <summary>
              Specifies that primitive types should not be mapped to their corresponding C# language keywords.
              <example>
                For example, the type <see cref="T:System.Int32"/> is formatted as <c>"int"</c> by default.
                When this flag is specified, it will be formatted as <c>"Int32"</c>.
              </example>
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.NoNullableQuestionMark">
            <summary>
              Specifies that nullable types should not be simplified to C# question mark syntax.
              <example>
              For example, the type <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> is formatted as <c>"int?"</c> by default.
              When this flag is specified, it will be formatted as <c>"Nullable&lt;int&gt;"</c>.
              </example>
            </summary>
        </member>
        <member name="F:TypeNameFormatter.TypeNameFormatOptions.NoTuple">
            <summary>
              Specifies that value tuple types should not be transformed to C# tuple syntax.
              <example>
              For example, the type <see cref="T:System.ValueTuple`2"/> of <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>
              is formatted as <c>"(bool, int)"</c> by default. When this flag is specified,
              it will be formatted as <c>"ValueTuple&lt;bool, int&gt;"</c>.
              </example>
            </summary>
        </member>
    </members>
</doc>
